{
  "openapi": "3.0.0",
  "info": {
    "title": "TasksRunner API",
    "description": "API for TasksRunner Application",
    "contact": {
      "name": "TasksRunner",
      "url": "https://tasksrunner.onrender.com",
      "email": "ahmedelasiriy@gmail.com"
    },
    "version": "1.0.0"
  },
  "schemes": ["http", "https"],
  "servers": [
    {
      "url": "{serverUrl}/api/{apiVersion}",
      "variables": {
        "serverUrl": {
          "default": "http://localhost:8080",
          "enum": ["https://tasksrunner.onrender.com", "http://localhost:8080"]
        },
        "apiVersion": {
          "default": "v1"
        }
      }
    }
  ],

  "tags": [
    {
      "name": "Healthz",
      "description": "Health check endpoint"
    },
    {
      "name": "Auth"
    },
    {
      "name": "Users",
      "description": "Operations about users"
    },
    {
      "name": "Taskers",
      "description": "Operations about taskers"
    },
    {
      "name": "Services"
    },
    {
      "name": "Chats"
    }
  ],

  "paths": {
    "/": {
      "get": {
        "tags": ["Healthz"],
        "summary": "Health check endpoint",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "tags": ["Healthz"],
        "summary": "Health check endpoint",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "Register a new user",
        "requestBody": {
          "description": "Create a new user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string"
                  },

                  "password": {
                    "type": "string"
                  },
                  "confirmPassword": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },

        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "description": "User login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["Users"],
        "summary": "Get logged-in user details",
        "description": "Get logged-in user details\n\n**Note:** This endpoint requires the user to be authenticated.",
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "patch": {
        "tags": ["Users"],
        "summary": "Update logged-in user profile",
        "requestBody": {
          "description": "Update logged-in user profile",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete logged-in user",
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/taskers/{userId}": {
      "get": {
        "tags": ["Taskers"],
        "summary": "Get tasker details",
        "description": "Get tasker details by userId\n\n**Note:** This endpoint is public.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Tasker ID",
            "required": true,
            "schema": {
              "type": "string",
              "example": "5f9b2b3b9d9b4b0017b3e6a0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tasker details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tasker"
                }
              }
            }
          },
          "404": {
            "description": "Tasker not found"
          }
        }
      }
    },
    "/taskers": {
      "get": {
        "tags": ["Taskers"],
        "summary": "Get list of taskers",
        "description": "Get a list of taskers filtered and ordered by location. \n\n**Query Parameters:**\n\n* `services` (*optional*): Filter taskers by service(s). Can pass a single service or comma separated list.\n* `longitude` (*optional*): User's longitude location.\n* `latitude` (*optional*): User's latitude location.\n* `maxDistance` (*optional*, default: `60`): Maximum distance in km to search.\n\nIf location parameters are provided, taskers will be returned sorted by proximity to the given point. \n\n_If no parameters are provided, taskers will be returned randomly without filtering or sorting._",
        "parameters": [
          {
            "name": "service",
            "in": "query",
            "description": "Service ID",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "latitude",
            "in": "query",
            "description": "User's latitude",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "longitude",
            "in": "query",
            "description": "User's longitude",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxDistance",
            "in": "query",
            "description": "Maximum distance in kilometers",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get list of taskers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Tasker"
                  }
                }
              }
            }
          }
        },
        "400": {
          "description": "Invalid request"
        }
      }
    },
    "tasker/become-tasker": {
      "post": {
        "tags": ["Taskers"],
        "summary": "Become a tasker",
        "description": "Register a new taskers. The user must be authenticated with a valid JWT bearer token.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "services": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "location": {
                    "type": "object",
                    "properties": {
                      "coordinates": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        }
                      }
                    },
                    "required": ["coordinates"]
                  },
                  "phoneNumber": {
                    "type": "string"
                  }
                },
                "required": ["services", "location", "phoneNumber"]
              }
            }
          }
        },

        "responses": {
          "201": {
            "description": "Tasker created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tasker"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/services": {
      "get": {
        "tags": ["Services"],
        "summary": "Get list of services",
        "description": "Get a list of all services that taskers can provide. \n\n**Note:** This endpoint not requires authentication.",
        "responses": {
          "200": {
            "description": "Get list of services",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Services"],
        "summary": "Create a new service",
        "description": "Creates a new service record. This route is intended for administrative users but for now any logged in user can create a service for testing purposes.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceInput"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Service created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },

    "/chats": {
      "get": {
        "tags": ["Chats"],
        "summary": "Get user's chat list",
        "description": "Get a list of chats associated with the logged-in user. Each chat represents a conversation with other users or taskers. **Note:** Requires authentication.",
        "responses": {
          "200": {
            "description": "List of user's chats",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": ["Chats"],
        "summary": "Create a new chat",
        "description": "Start a new chat with another user or tasker. This allows users to initiate conversations and send messages to other participants. **Note:** Requires authentication.",
        "requestBody": {
          "description": "Create a new chat",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChatInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Chat created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/chats/{id}": {
      "get": {
        "tags": ["Chats"],
        "summary": "Get chat by ID",
        "description": "Get a specific chat by its unique ID. This endpoint allows you to retrieve a detailed conversation between the user and other users or taskers. **Note:** Requires authentication.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Chat ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chat details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string"
                    },
                    "client": {
                      "type": "string"
                    },
                    "tasker": {
                      "type": "string"
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "_id": {
                            "type": "string"
                          },
                          "sender": {
                            "type": "string"
                          },
                          "message": {
                            "type": "string"
                          },
                          "createdAt": {
                            "type": "string",
                            "format": "date-time"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Chat not found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserSignup": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },

          "password": {
            "type": "string"
          },
          "confirmPassword": {
            "type": "string"
          }
        },
        "required": ["name", "email", "password", "confirmPassword"]
      },
      "UserLogin": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": ["email", "password"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },

              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "required": ["_id", "email", "firstName", "lastName"]
          },
          "token": {
            "type": "string"
          }
        },
        "required": ["data", "token"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              }
            },
            "required": ["_id", "email", "firstName", "lastName"]
          },
          "token": {
            "type": "string"
          }
        },
        "required": ["data", "token"]
      },
      "Tasker": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "services": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rating": {
            "type": "number"
          },
          "completedTasks": {
            "type": "integer"
          },
          "location": {
            "type": "object",
            "properties": {
              "coordinates": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              },
              "type": {
                "type": "string",
                "enum": ["Point"]
              }
            }
          }
        },
        "required": ["_id", "userId", "services", "rating", "completedTasks", "location", "createdAt", "updatedAt"]
      },
      "TaskerInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "specialization": {
            "type": "string"
          }
        },
        "required": ["name", "specialization"]
      },
      "Service": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "ServiceInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": ["name", "description"]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },

          "profilePicture": {
            "type": "object",
            "properties": {
              "url": {
                "type": "string"
              },
              "publicId": {
                "type": "string"
              }
            }
          }
        },
        "required": []
      },
      "Chat": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Chat ID"
          },

          "client": { "type": "string" },
          "tasker": { "type": "string" }
        }
      },
      "CreateChatInput": {
        "type": "object",
        "properties": {
          "client": {
            "type": "string"
          },
          "tasker": {
            "type": "string"
          }
        },
        "required": ["participants"]
      }
    },

    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "in": "header",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://tasksrunner.onrender.com/auth/login"
          }
        }
      }
    }
  }
}
